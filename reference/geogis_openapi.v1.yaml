openapi: 3.0.0
info:
  title: geogis_openapi
  version: '1.0'
  description: geogisapi
servers:
  - url: 'http://localhost:3000'
paths:
  '/location/{locationId_or_nr}':
    parameters:
      - schema:
          type: string
          example: 751-00001 or 12f45a71-1a1f-1121-121a1f111121
        name: locationId_or_nr
        in: path
        description: GUID or locationname of location (ProjectID/projectno)
        required: true
    get:
      summary: Get location by locationid
      tags: []
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
        '302':
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  locationid:
                    type: string
                  locationName:
                    type: string
                  x:
                    type: number
                  'y':
                    type: number
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                description: ''
                type: object
                properties:
                  location:
                    type: object
                    required:
                      - locationId
                    properties:
                      locationId:
                        type: string
                        minLength: 1
                      locationName:
                        type: string
                        minLength: 1
                      address:
                        type: string
                        minLength: 1
                      x: {}
                      'y': {}
                required:
                  - location
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-location
      description: Retrieve the information of a location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
      parameters:
        - schema:
            type: number
          in: query
          name: x
          description: 'x coordinate '
        - schema:
            type: number
          in: query
          name: 'y'
          description: y coordinate
        - schema:
            type: string
          in: query
          name: distance
          description: 'distance from x,y'
  /user:
    post:
      summary: Create New User - example
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  '/samplesite/{samplesiteid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  samplesite:
                    type: object
                    properties:
                      samplesiteid:
                        type: string
                      samplesiteNo:
                        type: string
                      publicno:
                        type: string
                      intakeid:
                        type: string
                    required:
                      - samplesiteid
          headers: {}
      operationId: get-samplesite
      description: Get details of samplesite (geogis point and or intake)
    parameters:
      - schema:
          type: string
        name: samplesiteid
        in: path
        required: true
        description: GUID of samplesite (geogis pointid or intakeid)
    patch:
      summary: ''
      operationId: patch-samplesite-samplesiteid
      responses:
        '200':
          description: OK
      parameters: []
components:
  schemas:
    feltdata2:
      title: feltdata2
      type: object
      description: model description
      properties:
        project:
          type: object
          properties:
            projectid:
              type: string
  securitySchemes: {}
